lm2 <- lm(yValues ~ m2)
lm3 <- lm(yValues ~ m3)
rmse(predict(lm1,data=xValues), yValues)
library(devtools)
install.packages("devtools")
install_github("medley", "mewo2")
library(medley)
? rmse
install.packages("tree")
? rmse
install_github("medley","mewo2")
rmse(predict(lm1,data=xValues), yValues)
rmse(predict(lm2,data=xValues), yValues)
rmse(predict(lm3,data=xValues), yValues)
library("devtools", lib.loc="C:/Users/Yinning/Documents/R/win-library/3.0")
install_github("medley","mewo2")
library(medley)
rmse(predict(lm1,data=xValues), yValues)
rmse(predict(lm2,data=xValues), yValues)
rmse(predict(lm3,data=xValues), yValues)
m2 <- ns(xValues, df=2)
lm2 <- lm(yValues ~ m2)
rmse(predict(lm2,data=xValues), yValues)
m4 <- ns(xValues, df=4)
lm4 <- lm(yValues ~ m4)
rmse(predict(lm4,data=xValues), yValues)
install.packages("simpleboot")
library(Simpleboot)
library(simpleboot)
data(airquality)
attach(airquality)
summary(wind)
quantile(wind)
quantile(wind,3)
View(airquality)
summary(Wind)
data(Cars93, package"MASS")
data(Cars93, package="MASS")
pwd
cd
wd
d
n = 1000
t_vector = rep(0,n)
n = 1000
t_vector = rep(0,n)
for i in 1:n{
#random chosen bomb number
x <- as.integer(runif(1, 1, 100))
#first guess
y <- as.integer(runif(1, 1, 100))
trial <- 1
while(y != x){
if (y > x) {
y <- as.integer(runif(1, 1, y))
}
else {
y <- as.integer(runif(1, y, 100))
}
trial <- trial + 1
}
t_vector[i] <- trial
}
t_vector[1]
t_vector[0]
t_vector[3]
n = 1000
t_vector = rep(0,n)
for (i in 1:n){
#random chosen bomb number
x <- as.integer(runif(1, 1, 100))
#first guess
y <- as.integer(runif(1, 1, 100))
trial <- 1
while(y != x){
if (y > x) {
y <- as.integer(runif(1, 1, y))
}
else {
y <- as.integer(runif(1, y, 100))
}
trial <- trial + 1
}
t_vector[i] <- trial
}
mean(t_vector)
head(t_vector)
x
y
as.integer(runif(1, 1, 100))
as.integer(runif(1, 1, 100))
as.integer(runif(1, 1, 100))
as.integer(runif(1, 1, 100))
as.integer(runif(1, 1, 100))
as.integer(runif(1, 1, 100))
as.integer(runif(1, 1, 100))
as.integer(runif(1, 1, 100))
as.integer(runif(1, 1, 100))
as.integer(runif(1, 1, 100))
as.integer(runif(1, 1, 100))
n = 1
t_vector = rep(0,n)
for (i in 1:n){
#random chosen bomb number
x <- as.integer(runif(1, 1, 100))
x
#first guess
y <- as.integer(runif(1, 1, 100))
y
trial <- 1
while(y != x){
if (y > x) {
y <- as.integer(runif(1, 1, y))
}
else {
y <- as.integer(runif(1, y, 100))
}
y
trial <- trial + 1
}
t_vector[i] <- trial
}
y
x
n = 1
t_vector = rep(0,n)
for (i in 1:n){
#random chosen bomb number
x <- as.integer(runif(1, 1, 100))
cat(x)
#first guess
y <- as.integer(runif(1, 1, 100))
cat(y)
trial <- 1
while(y != x){
if (y > x) {
y <- as.integer(runif(1, 1, y))
}
else {
y <- as.integer(runif(1, y, 100))
}
cat(y)
trial <- trial + 1
}
t_vector[i] <- trial
}
mean(t_vector)
n = 1
t_vector = rep(0,n)
for (i in 1:n){
#random chosen bomb number
x <- as.integer(runif(1, 1, 100))
cat(x \n)
#first guess
y <- as.integer(runif(1, 1, 100))
cat(y \n)
trial <- 1
while(y != x){
if (y > x) {
y <- as.integer(runif(1, 1, y))
}
else {
y <- as.integer(runif(1, y, 100))
}
cat(y  \n)
trial <- trial + 1
}
t_vector[i] <- trial
}
mean(t_vector)
n = 1
t_vector = rep(0,n)
for (i in 1:n){
#random chosen bomb number
x <- as.integer(runif(1, 1, 100))
cat(x \n)
#first guess
y <- as.integer(runif(1, 1, 100))
cat(y "\n")
trial <- 1
while(y != x){
if (y > x) {
y <- as.integer(runif(1, 1, y))
}
else {
y <- as.integer(runif(1, y, 100))
}
cat(y  \n)
trial <- trial + 1
}
t_vector[i] <- trial
}
mean(t_vector)
n = 1
t_vector = rep(0,n)
for (i in 1:n){
#random chosen bomb number
x <- as.integer(runif(1, 1, 100))
cat(x, "\n")
#first guess
y <- as.integer(runif(1, 1, 100))
cat(y, "\n")
trial <- 1
while(y != x){
if (y > x) {
y <- as.integer(runif(1, 1, y))
}
else {
y <- as.integer(runif(1, y, 100))
}
cat(y,"\n")
trial <- trial + 1
}
t_vector[i] <- trial
}
n = 2
t_vector = rep(0,n)
for (i in 1:n){
#random chosen bomb number
x <- as.integer(runif(1, 1, 100))
cat(x, "\n")
#first guess
y <- as.integer(runif(1, 1, 100))
cat(y, "\n")
trial <- 1
while(y != x){
if (y > x) {
y <- as.integer(runif(1, 1, y))
}
else {
y <- as.integer(runif(1, y, 100))
}
cat(y,"\n")
trial <- trial + 1
}
t_vector[i] <- trial
}
n = 2
t_vector = rep(0,n)
for (i in 1:n){
#random chosen bomb number
x <- as.integer(runif(1, 1, 100))
cat(x, "\n")
#first guess
y <- as.integer(runif(1, 1, 100))
cat(y, "\n")
trial <- 1
low <- 1
high <- 100
while(y != x){
if (y > x) {
high <- y
y <- as.integer(runif(1, low, y))
}
else {
low <- y
y <- as.integer(runif(1, y, high))
}
cat(y,"\n")
trial <- trial + 1
}
}
n = 100
t_vector = rep(0,n)
for (i in 1:n){
#random chosen bomb number
x <- as.integer(runif(1, 1, 100))
#cat(x, "\n")
#first guess
y <- as.integer(runif(1, 1, 100))
#cat(y, "\n")
trial <- 1
low <- 1
high <- 100
while(y != x){
if (y > x) {
high <- y
y <- as.integer(runif(1, low, y))
}
else {
low <- y
y <- as.integer(runif(1, y, high))
}
#cat(y,"\n")
trial <- trial + 1
}
t_vector[i] <- trial
}
mean(t_vector)
n = 100000
t_vector = rep(0,n)
for (i in 1:n){
#random chosen bomb number
x <- as.integer(runif(1, 1, 100))
#cat(x, "\n")
#first guess
y <- as.integer(runif(1, 1, 100))
#cat(y, "\n")
trial <- 1
low <- 1
high <- 100
while(y != x){
if (y > x) {
high <- y
y <- as.integer(runif(1, low, y))
}
else {
low <- y
y <- as.integer(runif(1, y, high))
}
#cat(y,"\n")
trial <- trial + 1
}
t_vector[i] <- trial
}
mean(t_vector)
install.packages("swirl")
library("swirl")
library("swirl")
library("swirl")
> swirl()
library("swirl") swirl()
library("swirl", lib.loc="~/R/win-library/3.0")
detach("package:swirl", unload=TRUE)
gl(3,10)
?gl
set.seed(1)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(y)
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
x <- rep(0:1, each = 5)
x
?which.min
?order
?min
?return
library("swirl", lib.loc="~/R/win-library/3.1")
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_version =="3.1.1", country=="US")
?Comparison
filter(cran, r_version <= "3.0.2", country=="IN")
filter(cran, country=="US"|country=="IN")
filter(cran, size > 100500)
filter(cran, size > 100500, r_os =="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran,!is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dp)
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
View(pack_sum)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, desc(counts))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(results3)
View(result3)
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex,count,-grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data=res, col=sex_class, into=c("sex", "class"))
submit()
students3
submit()
?spread
submit()
extract_numeric("class5")
extract_numeric("class1")
colnames(students3)
submit()
submit
submit()
submit()
?mutate
submit()
students4
submit()
submit()
?unique
submit()
submit()
passed
failed
passed <- mutate(passed, status = "pasesed")
passed <- mutate(passed, status = "passed")
failed <- mutate(passed, status = "failed")
failed <- mutate(failed, status = "failed")
bind_rows(passed,failed)
sat
submit()
?seprate
?separate
submit()
submit()
submit()
swirl
swirl()
install.packages("lubridate")
library("ggplot2", lib.loc="~/R/win-library/3.1")
library("ggthemes", lib.loc="~/R/win-library/3.1")
library("dplyr", lib.loc="~/R/win-library/3.1")
setwd("D:/Dropbox/Coursera/01 Data Science/05 Reproducible Research/RepData_PeerAssessment1")
## Loading and preprocessing the data
act <- read.csv("./activity/activity.csv")
act$date <- as.Date(act$date)
act$steps <- as.numeric(act$steps)
str(act)
## What is mean total number of steps taken per day?
#Calculate the total number of steps taken per day
act_sumByDay <- act %>% group_by(date) %>% summarise(totalsteps = sum(steps, na.rm=TRUE))
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps))
print(histPlot)
print(histPlot)
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram()
print(histPlot)
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps))
+ geom_histogram()
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram(stat="identity")
print(histPlot)
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram(aes(y = ..count..))
print(histPlot)
View(act_sumByDay)
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram(aes(fill = ..count..))
i
print(histPlot)
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram(aes(fill = ..count..), binwidth=10)
print(histPlot)
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram(aes(fill = ..count..), binwidth=1000)
print(histPlot)
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram(aes(fill = ..count..), binwidth=500)
print(histPlot)
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram(aes(fill = ..count..), binwidth=2000)
print(histPlot)
act_sumByDay <- act %>% na.omit() %>% group_by(date) %>% summarise(totalsteps = sum(steps))
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram(aes(fill = ..count..), binwidth=2000)
print(histPlot)
View(act_sumByDay)
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram(aes(fill = ..count..), binwidth=1000)
print(histPlot)
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram(aes(fill = ..count..), binwidth=2000)
print(histPlot)
histPlot <- ggplot(act_sumByDay, aes(x=totalsteps)) + geom_histogram(aes(fill = ..count..), binwidth=2000) +
theme_bw()
print(histPlot)
